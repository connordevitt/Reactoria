{"version":3,"file":"static/js/516.39aa9ec9.chunk.js","mappings":"2MAOA,MAAMA,EAAW,CACf,mBAAoB,gCAIhBC,EAAgB,CACpB,aAAc,CACZ,sBACA,iBACA,qBACA,kBACA,qBAEF,UAAW,CACT,iBACA,oBACA,oBACA,mBACA,kBAEF,UAAW,CACT,mBACA,iBACA,qBACA,gBACA,qBAEF,aAAc,CACZ,sBACA,oBACA,eACA,kBACA,sBAEF,UAAW,CACT,gBACA,uBACA,iBACA,gBACA,yBAEF,UAAW,CACT,mBACA,mBACA,uBACA,sBACA,yBAIEC,EAAYA,KAChB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,WAC1BK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,GACvCO,QAAQC,IAAI,kBAAmBX,IAW/BY,EAAAA,EAAAA,YAAU,KACeC,WACrB,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAC3B,0DAEFN,QAAQC,IAAI,6BAA8BG,EAASG,KAAKC,SACxDhB,EAAeY,EAASG,KAAKC,SAE7B,MAAMC,QAAmBJ,EAAAA,EAAMC,IAC7B,0DAEFN,QAAQC,IAAI,6BAA8BQ,EAAWF,KAAKC,SAC1Db,EAAec,EAAWF,KAAKC,QACjC,CAAE,MAAOE,GACPV,QAAQU,MAAM,4BAA6BA,EAC7C,GAGFC,EAAgB,GACf,IAEH,MAoCMC,EAAqBC,IACzB,MAAMC,EArCqBD,IACpBA,EACJE,SAASC,GACHC,MAAMC,QAAQF,EAASG,aAOrBH,EAASG,aANdnB,QAAQoB,KACN,+CACAJ,GAEK,MAIVK,MACC,CAACC,EAAGC,IACFC,WAAWD,EAAEE,mBAAqBD,WAAWF,EAAEG,qBAuB7BC,CAAoBb,GAE5C,OAAKC,GAA8C,IAA3BA,EAAgBa,QAOtCC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,EAAAC,SAAA,EACtCC,EAAAA,EAAAA,KAAA,SAAAD,UACEN,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWF,SAAC,UAC1BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUF,SAAC,OACzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUF,SAAC,OACzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUF,SAAC,WACzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUF,SAAC,aAG7BC,EAAAA,EAAAA,KAAA,SAAAD,SACGpB,EAAgBuB,KAAI,CAACC,EAAQC,KAAK,IAAAC,EAAA,OACjCZ,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,UAAgB,QAAXM,EAAAF,EAAOG,YAAI,IAAAD,OAAA,EAAXA,EAAaE,OAAQ,SAC1BP,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAOK,MAAQ,SACpBR,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAOM,QAAU,SACtBT,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAOb,mBAAqB,SACjCU,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAOO,WAAa,UALlBN,EAMJ,UAvBTJ,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,+BA0BhC,EAINY,EAA0BA,CAACC,EAAclC,KAC7C,MAAMmC,EAtDqBC,EAACpC,EAAWkC,KACvC,MAAMG,EAAkB7D,EAAc0D,GAMtC,OALA/C,QAAQC,IACN,oCAAoC8C,IACpCG,GAGKrC,EAAUE,SAASC,GACnBC,MAAMC,QAAQF,EAASG,aAIrBH,EAASG,YAAYgC,QAAQC,IAAU,IAAAC,EAAA,OAC5CH,EAAgBI,SAAwB,QAAhBD,EAACD,EAAWX,YAAI,IAAAY,OAAA,EAAfA,EAAiBX,KAAK,KAJ/C1C,QAAQoB,KAAK,+CAAgDJ,GACtD,KAKT,EAuCwBiC,CAAqBpC,EAAWkC,GAE1D,OAAKC,GAAkD,IAA7BA,EAAkBrB,QAS1CC,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yBAAwBF,SAAEa,KACxCnB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,EAAAC,SAAA,EACtCC,EAAAA,EAAAA,KAAA,SAAAD,UACEN,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWF,SAAC,UAC1BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUF,SAAC,OACzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUF,SAAC,OACzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUF,SAAC,WACzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUF,SAAC,aAG7BC,EAAAA,EAAAA,KAAA,SAAAD,SACGc,EAAkBX,KAAI,CAACC,EAAQC,KAAK,IAAAgB,EAAAC,EAAA,OACnC5B,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SACc,QAAXqB,EAAAjB,EAAOG,YAAI,IAAAc,GAAXA,EAAab,MAAQtD,EAASkD,EAAOG,KAAKC,OACzCP,EAAAA,EAAAA,KAAA,KACEsB,KAAMrE,EAASkD,EAAOG,KAAKC,MAC3BgB,OAAO,SACPC,IAAI,sBACJC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,WAAY5B,SAEnDI,EAAOG,KAAKC,QAGJ,QAAXc,EAAAlB,EAAOG,YAAI,IAAAe,OAAA,EAAXA,EAAad,OAAQ,SAGzBP,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAOK,MAAQ,SACpBR,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAOM,QAAU,SACtBT,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAOb,mBAAqB,SACjCU,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAOO,WAAa,UAlBlBN,EAmBJ,UAIXJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBA5CdR,EAAAA,EAAAA,MAAA,KAAGQ,UAAU,yBAAwBF,SAAA,CAAC,mCACHa,EAAa,MA4C5C,EAGV,OACEnB,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yBAAwBF,SAAC,wBAEvCN,EAAAA,EAAAA,MAACmC,EAAAA,EAAQ,CAAC3B,UAAU,mBAAkBF,SAAA,EACpCC,EAAAA,EAAAA,KAAC4B,EAAAA,EAASC,OAAM,CAACC,QAAQ,OAAOC,GAAG,iBAAiB9B,UAAU,OAAMF,SACxD,WAATtC,EAAoB,mBAAqB,wBAG5CgC,EAAAA,EAAAA,MAACmC,EAAAA,EAASI,KAAI,CAAAjC,SAAA,EACZC,EAAAA,EAAAA,KAAC4B,EAAAA,EAASK,KAAI,CAACC,QAASA,IAAMxE,EAAQ,UAAUqC,SAAC,sBAGjDC,EAAAA,EAAAA,KAAC4B,EAAAA,EAASK,KAAI,CAACC,QAASA,IAAMxE,EAAQ,YAAYqC,SAAC,6BAM7C,WAATtC,GACCgC,EAAAA,EAAAA,MAAA0C,EAAAA,SAAA,CAAApC,SAAA,EAEEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBF,UAClCN,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,YAAWF,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yBAAwBF,SAAC,yBACtCtB,EAAkBrB,SAGvB4C,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBF,UAC7BN,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,YAAWF,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yBAAwBF,SAAC,yBACtCtB,EAAkBlB,YAKzByC,EAAAA,EAAAA,KAAAmC,EAAAA,SAAA,CAAApC,UAEEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBF,UAClCN,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,YAAWF,SAAA,CACvBY,EAAwB,aAAcvD,GACtCuD,EAAwB,UAAWvD,GACnCuD,EAAwB,UAAWvD,GACnCuD,EAAwB,aAAcpD,GACtCoD,EAAwB,UAAWpD,GACnCoD,EAAwB,UAAWpD,YAKxC,EAIV,G","sources":["components/standings.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min.js\";\r\n\r\nconst teamURLS = {\r\n  \"New York Yankees\": \"https://www.mlb.com/yankees/\",\r\n};\r\n\r\n// Go Yankees!\r\nconst divisionTeams = {\r\n  \"AL Central\": [\r\n    \"Cleveland Guardians\",\r\n    \"Detroit Tigers\",\r\n    \"Kansas City Royals\",\r\n    \"Minnesota Twins\",\r\n    \"Chicago White Sox\",\r\n  ],\r\n  \"AL East\": [\r\n    \"Tampa Bay Rays\",\r\n    \"Toronto Blue Jays\",\r\n    \"Baltimore Orioles\",\r\n    \"New York Yankees\",\r\n    \"Boston Red Sox\",\r\n  ],\r\n  \"AL West\": [\r\n    \"Seattle Mariners\",\r\n    \"Houston Astros\",\r\n    \"Los Angeles Angels\",\r\n    \"Texas Rangers\",\r\n    \"Oakland Athletics\",\r\n  ],\r\n  \"NL Central\": [\r\n    \"St. Louis Cardinals\",\r\n    \"Milwaukee Brewers\",\r\n    \"Chicago Cubs\",\r\n    \"Cincinnati Reds\",\r\n    \"Pittsburgh Pirates\",\r\n  ],\r\n  \"NL East\": [\r\n    \"Miami Marlins\",\r\n    \"Washington Nationals\",\r\n    \"Atlanta Braves\",\r\n    \"New York Mets\",\r\n    \"Philadelphia Phillies\",\r\n  ],\r\n  \"NL West\": [\r\n    \"San Diego Padres\",\r\n    \"Colorado Rockies\",\r\n    \"San Francisco Giants\",\r\n    \"Los Angeles Dodgers\",\r\n    \"Arizona Diamondbacks\",\r\n  ],\r\n};\r\n\r\nconst Standings = () => {\r\n  const [alStandings, setALStandings] = useState([]);\r\n  const [nlStandings, setNLStandings] = useState([]);\r\n  const [view, setView] = useState(\"League\"); // \"League\" or \"Division\"\r\n  const [loading, setLoading] = useState(true);\r\n  console.log(\"Standings data:\", Standings);\r\n\r\n  const divisionNameMap = {\r\n    \"AL Central\": \"American League Central\",\r\n    \"AL East\": \"American League East\",\r\n    \"AL West\": \"American League West\",\r\n    \"NL Central\": \"National League Central\",\r\n    \"NL East\": \"National League East\",\r\n    \"NL West\": \"National League West\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchStandings = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"https://statsapi.mlb.com/api/v1/standings?leagueId=103\"\r\n        );\r\n        console.log(\"AL Standings API Response:\", response.data.records);\r\n        setALStandings(response.data.records);\r\n\r\n        const nlResponse = await axios.get(\r\n          \"https://statsapi.mlb.com/api/v1/standings?leagueId=104\"\r\n        );\r\n        console.log(\"NL Standings API Response:\", nlResponse.data.records);\r\n        setNLStandings(nlResponse.data.records);\r\n      } catch (error) {\r\n        console.error(\"Error fetching standings:\", error);\r\n      }\r\n    };\r\n\r\n    fetchStandings();\r\n  }, []);\r\n\r\n  const sortLeagueStandings = (standings) => {\r\n    return standings\r\n      .flatMap((division) => {\r\n        if (!Array.isArray(division.teamRecords)) {\r\n          console.warn(\r\n            \"Missing or invalid teamRecords for division:\",\r\n            division\r\n          );\r\n          return [];\r\n        }\r\n        return division.teamRecords;\r\n      })\r\n      .sort(\r\n        (a, b) =>\r\n          parseFloat(b.winningPercentage) - parseFloat(a.winningPercentage)\r\n      );\r\n  };\r\n\r\n  const getDivisionStandings = (standings, divisionName) => {\r\n    const teamsInDivision = divisionTeams[divisionName];\r\n    console.log(\r\n      `Filtering for teams in division: ${divisionName}`,\r\n      teamsInDivision\r\n    );\r\n\r\n    return standings.flatMap((division) => {\r\n      if (!Array.isArray(division.teamRecords)) {\r\n        console.warn(\"Missing or invalid teamRecords for division:\", division);\r\n        return [];\r\n      }\r\n      return division.teamRecords.filter((teamRecord) =>\r\n        teamsInDivision.includes(teamRecord.team?.name)\r\n      );\r\n    });\r\n  };\r\n\r\n  const renderLeagueTable = (standings) => {\r\n    const sortedStandings = sortLeagueStandings(standings);\r\n\r\n    if (!sortedStandings || sortedStandings.length === 0) {\r\n      return (\r\n        <p className=\"text-center text-white\">No standings data available</p>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Table striped bordered hover responsive>\r\n        <thead>\r\n          <tr>\r\n            <th className=\"Team-name\">Team</th>\r\n            <th className=\"stat-col\">W</th>\r\n            <th className=\"stat-col\">L</th>\r\n            <th className=\"stat-col\">Win %</th>\r\n            <th className=\"stat-col\">GB</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedStandings.map((record, index) => (\r\n            <tr key={index}>\r\n              <td>{record.team?.name || \"N/A\"}</td>\r\n              <td>{record.wins || \"N/A\"}</td>\r\n              <td>{record.losses || \"N/A\"}</td>\r\n              <td>{record.winningPercentage || \"N/A\"}</td>\r\n              <td>{record.gamesBack || \"N/A\"}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  };\r\n\r\n  const renderDivisionStandings = (divisionName, standings) => {\r\n    const divisionStandings = getDivisionStandings(standings, divisionName);\r\n\r\n    if (!divisionStandings || divisionStandings.length === 0) {\r\n      return (\r\n        <p className=\"text-center text-white\">\r\n          No standings data available for {divisionName}.\r\n        </p>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h4 className=\"text-center text-white\">{divisionName}</h4>\r\n        <Table striped bordered hover responsive>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"Team-name\">Team</th>\r\n              <th className=\"stat-col\">W</th>\r\n              <th className=\"stat-col\">L</th>\r\n              <th className=\"stat-col\">Win %</th>\r\n              <th className=\"stat-col\">GB</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {divisionStandings.map((record, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  {record.team?.name && teamURLS[record.team.name] ? (\r\n                    <a\r\n                      href={teamURLS[record.team.name]}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      style={{ textDecoration: \"none\", color: \"inherit\" }}\r\n                    >\r\n                      {record.team.name}\r\n                    </a>\r\n                  ) : (\r\n                    record.team?.name || \"N/A\"\r\n                  )}\r\n                </td>\r\n                <td>{record.wins || \"N/A\"}</td>\r\n                <td>{record.losses || \"N/A\"}</td>\r\n                <td>{record.winningPercentage || \"N/A\"}</td>\r\n                <td>{record.gamesBack || \"N/A\"}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n        <hr className=\"text-white\" />\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-center text-white\">MLB 2025 Standings</h2>\r\n\r\n      <Dropdown className=\"mb-4 text-center\">\r\n        <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\" className=\"mt-5\">\r\n          {view === \"League\" ? \"League Standings\" : \"Division Standings\"}\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setView(\"League\")}>\r\n            League Standings\r\n          </Dropdown.Item>\r\n          <Dropdown.Item onClick={() => setView(\"Division\")}>\r\n            Division Standings\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n\r\n      {view === \"League\" ? (\r\n        <>\r\n          {/* League Standings */}\r\n          <div className=\"card shadow-sm mb-4\">\r\n            <div className=\"card-body\">\r\n              <h3 className=\"text-center text-white\">American League (AL)</h3>\r\n              {renderLeagueTable(alStandings)}\r\n            </div>\r\n          </div>\r\n          <div className=\"card shadow-sm\">\r\n            <div className=\"card-body\">\r\n              <h3 className=\"text-center text-white\">National League (NL)</h3>\r\n              {renderLeagueTable(nlStandings)}\r\n            </div>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {/* Division Standings */}\r\n          <div className=\"card shadow-sm mb-4\">\r\n            <div className=\"card-body\">\r\n              {renderDivisionStandings(\"AL Central\", alStandings)}\r\n              {renderDivisionStandings(\"AL East\", alStandings)}\r\n              {renderDivisionStandings(\"AL West\", alStandings)}\r\n              {renderDivisionStandings(\"NL Central\", nlStandings)}\r\n              {renderDivisionStandings(\"NL East\", nlStandings)}\r\n              {renderDivisionStandings(\"NL West\", nlStandings)}\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Standings;\r\n"],"names":["teamURLS","divisionTeams","Standings","alStandings","setALStandings","useState","nlStandings","setNLStandings","view","setView","loading","setLoading","console","log","useEffect","async","response","axios","get","data","records","nlResponse","error","fetchStandings","renderLeagueTable","standings","sortedStandings","flatMap","division","Array","isArray","teamRecords","warn","sort","a","b","parseFloat","winningPercentage","sortLeagueStandings","length","_jsxs","Table","striped","bordered","hover","responsive","children","_jsx","className","map","record","index","_record$team","team","name","wins","losses","gamesBack","renderDivisionStandings","divisionName","divisionStandings","getDivisionStandings","teamsInDivision","filter","teamRecord","_teamRecord$team","includes","_record$team2","_record$team3","href","target","rel","style","textDecoration","color","Dropdown","Toggle","variant","id","Menu","Item","onClick","_Fragment"],"sourceRoot":""}